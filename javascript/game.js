// Generated by CoffeeScript 1.6.2
(function() {
  var Boulder, Bullet, Player,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Player = (function() {
    function Player(game) {
      this.game = game;
      this.checkCollisions = __bind(this.checkCollisions, this);
      this.fire = __bind(this.fire, this);
      this.enableFire = __bind(this.enableFire, this);
      this.motorOff = __bind(this.motorOff, this);
      this.motorOn = __bind(this.motorOn, this);
      this.dieable = __bind(this.dieable, this);
      this.x = 400;
      this.y = 300;
      this.s_x = 0;
      this.s_y = 0;
      this.rotation = 0;
      this.stroke = '#080';
      this.strokeInvincible = "#800";
      this.speed = 0;
      this.lives = 3;
      this.invincibility();
      this.shootTimeout = false;
      this.moto = false;
    }

    Player.prototype.invincibility = function() {
      this.invincible = true;
      return setTimeout(this.dieable, 2000);
    };

    Player.prototype.dieable = function() {
      return this.invincible = false;
    };

    Player.prototype.left = function() {
      return this.rotation -= 0.1;
    };

    Player.prototype.right = function() {
      return this.rotation += 0.1;
    };

    Player.prototype.accelerate = function() {
      var diff_x, diff_y, speed;

      diff_x = Math.sin(this.rotation) * 0.2;
      diff_y = Math.cos(this.rotation) * 0.2;
      speed = Math.sqrt(Math.pow(this.s_x + diff_x, 2) + Math.pow(this.s_y - diff_y, 2));
      if (!(speed > 5)) {
        this.s_x += diff_x;
        this.s_y -= diff_y;
      }
      return this.motorOn();
    };

    Player.prototype.brake = function() {};

    Player.prototype.motorOn = function() {
      if (!this.motor) {
        Wafex.start('wroom');
        return this.motor = true;
      }
    };

    Player.prototype.motorOff = function() {
      if (this.motor) {
        Wafex.stop('wroom');
        return this.motor = false;
      }
    };

    Player.prototype.enableFire = function() {
      return this.shootTimeout = false;
    };

    Player.prototype.fire = function() {
      var diff_x, diff_y;

      if (this.shootTimeout) {
        return;
      }
      diff_x = Math.sin(this.rotation) * 2;
      diff_y = Math.cos(this.rotation) * 2;
      this.game.addBullet(new Bullet(this.game, this.x, this.y, this.s_x + diff_x, this.s_y - diff_y, this.rotation));
      Wafex.play('pew');
      this.shootTimeout = true;
      return setTimeout(this.enableFire, 200);
    };

    Player.prototype.move = function() {
      this.x += this.s_x;
      this.y += this.s_y;
      if (this.x >= 800) {
        this.x = 0;
      }
      if (this.y >= 600) {
        this.y = 0;
      }
      if (this.x < 0) {
        this.x = 800;
      }
      if (this.y < 0) {
        return this.y = 600;
      }
    };

    Player.prototype.draw = function(ctx) {
      ctx.strokeStyle = this.invincible ? this.strokeInvincible : this.stroke;
      ctx.save();
      ctx.translate(this.x, this.y);
      ctx.rotate(this.rotation);
      ctx.beginPath();
      ctx.moveTo(0, -10);
      ctx.lineTo(7, 10);
      ctx.lineTo(-7, 10);
      ctx.closePath();
      ctx.stroke();
      return ctx.restore();
    };

    Player.prototype.checkCollisions = function(boulders) {
      var boulder, distance, _i, _len, _results;

      if (this.invincible) {
        return;
      }
      _results = [];
      for (_i = 0, _len = boulders.length; _i < _len; _i++) {
        boulder = boulders[_i];
        distance = Math.abs(Math.sqrt(Math.pow(boulder.x - this.x, 2) + Math.pow(boulder.y - this.y, 2)));
        if (distance <= boulder.size) {
          this.lives--;
          Wafex.play('boom');
          if (this.lives === 0) {
            this.game.died();
          }
          _results.push(this.invincibility());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return Player;

  })();

  Bullet = (function() {
    function Bullet(game, x, y, s_x, s_y, angle) {
      this.game = game;
      this.x = x;
      this.y = y;
      this.s_x = s_x;
      this.s_y = s_y;
      this.angle = angle;
      this.draw = __bind(this.draw, this);
      this.move = __bind(this.move, this);
      this.stroke = '#000';
      this.distance = 1000;
    }

    Bullet.prototype.move = function() {
      this.distance -= Math.abs(Math.sqrt(Math.pow(this.s_x, 2) + Math.pow(this.s_y, 2)));
      if (this.distance < 0) {
        this.game.removeBullet(this);
      }
      this.x += this.s_x;
      this.y += this.s_y;
      if (this.x >= 800) {
        this.x = 0;
      }
      if (this.y >= 600) {
        this.y = 0;
      }
      if (this.x < 0) {
        this.x = 800;
      }
      if (this.y < 0) {
        this.y = 600;
      }
      return this.rotation += 0.03;
    };

    Bullet.prototype.draw = function(ctx) {
      ctx.strokeStyle = this.stroke;
      ctx.save();
      ctx.translate(this.x, this.y);
      ctx.rotate(this.angle);
      ctx.beginPath();
      ctx.moveTo(0, 0);
      ctx.lineTo(0, 10);
      ctx.stroke();
      return ctx.restore();
    };

    Bullet.prototype.checkCollisions = function(boulders) {
      var boulder, distance, _i, _len, _results;

      _results = [];
      for (_i = 0, _len = boulders.length; _i < _len; _i++) {
        boulder = boulders[_i];
        distance = Math.abs(Math.sqrt(Math.pow(boulder.x - this.x, 2) + Math.pow(boulder.y - this.y, 2)));
        if (distance <= boulder.size) {
          boulder.explode();
          _results.push(this.game.removeBullet(this));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return Bullet;

  })();

  Boulder = (function() {
    function Boulder(game, x, y, size, angle, speed) {
      this.game = game;
      this.x = x;
      this.y = y;
      this.size = size;
      this.angle = angle;
      this.speed = speed;
      this.explode = __bind(this.explode, this);
      this.stroke = '#008';
      this.rotation = 0;
    }

    Boulder.prototype.move = function() {
      this.x += -this.speed * Math.sin(-this.angle);
      this.y += -this.speed * Math.cos(-this.angle);
      if (this.x >= 800) {
        this.x = 0;
      }
      if (this.y >= 600) {
        this.y = 0;
      }
      if (this.x < 0) {
        this.x = 800;
      }
      if (this.y < 0) {
        this.y = 600;
      }
      return this.rotation += 0.03;
    };

    Boulder.prototype.draw = function(ctx) {
      var i, x, y, _i, _ref;

      ctx.strokeStyle = this.stroke;
      ctx.save();
      ctx.translate(this.x, this.y);
      ctx.rotate(this.rotation);
      ctx.beginPath();
      ctx.moveTo(0, this.size);
      this.count = 9;
      for (i = _i = 0, _ref = this.count; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        x = Math.sin(2 * Math.PI / this.count * i) * this.size;
        y = Math.cos(2 * Math.PI / this.count * i) * this.size;
        ctx.lineTo(x, y);
      }
      ctx.stroke();
      return ctx.restore();
    };

    Boulder.prototype.explode = function() {
      Wafex.play('boom');
      console.log("EXPLODE", this.size);
      if (this.size > 10) {
        this.game.addBoulder(new Boulder(this.game, this.x, this.y, this.size / 2, this.angle - (Math.PI / 4), this.speed * 1.2));
        this.game.addBoulder(new Boulder(this.game, this.x, this.y, this.size / 2, this.angle + (Math.PI / 4), this.speed * 1.2));
      }
      return this.game.removeBoulder(this);
    };

    return Boulder;

  })();

  window.Game = (function() {
    function Game(canvas) {
      this.canvas = canvas;
      this.gameloop = __bind(this.gameloop, this);
      this.keyUp = __bind(this.keyUp, this);
      this.keyDown = __bind(this.keyDown, this);
      this.KEYS = {
        32: 'space',
        38: 'up',
        40: 'down',
        37: 'left',
        39: 'right'
      };
      this.keysPressed = [];
      Wafex.init();
      this.$canvas = $(this.canvas);
      this.ctx = this.$canvas.get(0).getContext('2d');
      this.ctx.lineWidth = 3;
      this.ctx.lineJoin = 'round';
      this.ctx.lineCap = 'round';
      this.player = new Player(this);
      this.boulders = [new Boulder(this, 200, 200, 40, 2, 2), new Boulder(this, 400, 200, 20, 6, 1), new Boulder(this, 800, 200, 10, 3, 0.8)];
      this.bullets = [];
      $(document).keydown(this.keyDown);
      $(document).keyup(this.keyUp);
      this.gameloop();
    }

    Game.prototype.keyDown = function(e) {
      if (this.KEYS[e.which]) {
        e.preventDefault();
        return this.keysPressed.push(this.KEYS[e.which]);
      }
    };

    Game.prototype.keyUp = function(e) {
      if (this.KEYS[e.which]) {
        e.preventDefault();
        return this.keysPressed = _(this.keysPressed).without(this.KEYS[e.which]);
      }
    };

    Game.prototype.addBoulder = function(obj) {
      return this.boulders.push(obj);
    };

    Game.prototype.removeBoulder = function(obj) {
      return this.boulders = _.without(this.boulders, obj);
    };

    Game.prototype.addBullet = function(obj) {
      return this.bullets.push(obj);
    };

    Game.prototype.removeBullet = function(obj) {
      return this.bullets = _.without(this.bullets, obj);
    };

    Game.prototype.died = function() {
      return console.log('you died!');
    };

    Game.prototype.cls = function() {
      return this.ctx.clearRect(0, 0, this.$canvas[0].width, this.$canvas[0].height);
    };

    Game.prototype.gameloop = function() {
      var entity, _i, _j, _len, _len1, _ref, _ref1;

      this.cls();
      this.player.move();
      this.player.draw(this.ctx);
      if (_(this.keysPressed).contains('left')) {
        this.player.left();
      }
      if (_(this.keysPressed).contains('right')) {
        this.player.right();
      }
      if (_(this.keysPressed).contains('up')) {
        this.player.accelerate();
      } else if (_(this.keysPressed).contains('down')) {
        this.player.brake();
      } else {
        this.player.motorOff();
      }
      if (_(this.keysPressed).contains('space')) {
        this.player.fire();
      }
      _ref = this.boulders;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        entity.move();
        entity.draw(this.ctx);
      }
      _ref1 = this.bullets;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        entity = _ref1[_j];
        entity.move();
        entity.draw(this.ctx);
        entity.checkCollisions(this.boulders);
      }
      this.player.checkCollisions(this.boulders);
      return requestAnimationFrame(this.gameloop);
    };

    return Game;

  })();

}).call(this);
